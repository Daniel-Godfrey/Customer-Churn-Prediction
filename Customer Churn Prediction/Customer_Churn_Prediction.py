# -*- coding: utf-8 -*-
"""Customer Churn Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16OqQ7dc8LYR3-3TruSYOX73c7zhOYyg2
"""

# ==============================================
# CUSTOMER CHURN PREDICTION PROJECT
# Dataset: Telco Customer Churn (Kaggle)
# Author: Daniel Godfrey
# ==============================================

# IMPORT LIBRARIES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, roc_curve
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
import warnings
warnings.filterwarnings("ignore")

# LOAD DATA
from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Telco-Customer-Churn.csv")
print(f"Dataset shape: {df.shape}")
print(df.head())

# BASIC CLEANING
# Remove customerID (irrelevant)
df.drop('customerID', axis=1, inplace=True)

# Convert TotalCharges to numeric
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# Handle missing values
df['TotalCharges'] = df['TotalCharges'].fillna(df['TotalCharges'].median())

# Convert target variable
df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

# EXPLORATORY DATA ANALYSIS (EDA)
print(df.describe())
print("\nChurn Rate:")
print(df['Churn'].value_counts(normalize=True))

# Plot churn distribution
sns.countplot(x='Churn', data=df)
plt.title('Churn Distribution')
plt.show()

# Select only numeric columns
numeric_df = df.select_dtypes(include=['number'])

# Compute correlation matrix
corr_matrix = numeric_df.corr()

# Check correlation with numerical features
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# FEATURE ENCODING
# Identify categorical columns
cat_cols = df.select_dtypes(include='object').columns

# Label encode binary columns
for col in cat_cols:
    if df[col].nunique() == 2:
        df[col] = LabelEncoder().fit_transform(df[col])
    else:
        df = pd.get_dummies(df, columns=[col], drop_first=True)

# FEATURE SCALING
scaler = StandardScaler()
num_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']
df[num_cols] = scaler.fit_transform(df[num_cols])

# TRAIN-TEST SPLIT
X = df.drop('Churn', axis=1)
y = df['Churn']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y)

# MODEL TRAINING & EVALUATION FUNCTION
def evaluate_model(model, X_train, y_train, X_test, y_test):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    roc = roc_auc_score(y_test, y_pred)
    print(f"Accuracy: {acc:.4f} | ROC-AUC: {roc:.4f}")
    print(classification_report(y_test, y_pred))
    cm = confusion_matrix(y_test, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(type(model).__name__)
    plt.show()

# LOGISTIC REGRESSION
print("\n--- Logistic Regression ---")
log_model = LogisticRegression(max_iter=1000)
evaluate_model(log_model, X_train, y_train, X_test, y_test)

# RANDOM FOREST
print("\n--- Random Forest ---")
rf_model = RandomForestClassifier(n_estimators=200, random_state=42)
evaluate_model(rf_model, X_train, y_train, X_test, y_test)

# XGBOOST CLASSIFIER
print("\n--- XGBoost ---")
xgb_model = XGBClassifier(
    eval_metric='logloss',
    use_label_encoder=False,
    random_state=42
)
evaluate_model(xgb_model, X_train, y_train, X_test, y_test)

# FEATURE IMPORTANCE
importances = pd.Series(rf_model.feature_importances_, index=X.columns)
importances.nlargest(10).sort_values().plot(kind='barh', figsize=(8,6))
plt.title('Top 10 Feature Importances (Random Forest)')
plt.show()

# ROC CURVE (Best Model)
y_pred_prob = rf_model.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)
plt.plot(fpr, tpr, label="Random Forest")
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

print("Done! Model training and evaluation complete.")

